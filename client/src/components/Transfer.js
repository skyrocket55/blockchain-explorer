import React, { useState } from 'react';
import EthereumAddresses from '../data/EthereumAddresses';
import Receipt from './Receipt';
import Header from './Header';
import { faker } from '@faker-js/faker';
import sha256 from 'crypto-js/sha256';
import { faMoneyBillTransfer } from '@fortawesome/free-solid-svg-icons';

function Transfer() {
  // Get the addresses generated by EthereumAddresses component
  const generatedAddresses = EthereumAddresses();

  // Use the state hook to manage selected from/to Addresses, input amount and nonce(counter)
  const [selectedFromAddress, setSelectedFromAddress] = useState(null);
  const [selectedToAddress, setSelectedToAddress] = useState(null);
  const [inputAmount, setInputAmount] = useState(null);
  const [nonce, setNonce] = useState(1);

  // handle receipt details and flag to show it
  const [receipt, setReceiptDetails] = useState({transactionHash: null, blockNumber: null, fromAddress: null, toAddress: null, amount: null, gasUsed: null});
  const [showReceipt, setShowReceipt] = useState(false);
  const [display, setDisplay] = useState({display: 'none'}); // validation div alerts

  // handle change on selected from address
  const handleOnChangeFromAddress = event => {
    const selectedFromValue = event.currentTarget.value;
    setSelectedFromAddress(selectedFromValue);
  };

  // handle change on selected to address
  const handleOnChangeToAddress = event => {
    const selectedToValue = event.currentTarget.value;
    setSelectedToAddress(selectedToValue);
  };

  // handle change on input amount
  const handleOnChangeAmount = event => {
    const amount = event.currentTarget.value;
    setInputAmount(amount);
  };

  // handle form submission
  const handleSubmit = (event) => {
    event.preventDefault(); //prevent form submission
    setNonce(nonce+1); //increment the counter
    setReceiptDetails({
      transactionHash: sha256(nonce + faker.string.uuid + inputAmount).toString(),
      blockHash: sha256(nonce + faker.string.uuid).toString(),
      blockNumber: nonce,
      fromAddress: selectedFromAddress,
      toAddress: selectedToAddress,
      amount: inputAmount,
      gasUsed: faker.number.int({ min: 100, max: 1000 }),
    });
    
    // Check Input Fields Validations to show receipt
    inputAmount!==null && selectedFromAddress!==null && selectedToAddress!==null && selectedFromAddress!==selectedToAddress
    ? setShowReceipt(true) : setDisplay({display: 'block'});
  };

  // reset all input
  const handleCancel = () => {
    setSelectedFromAddress(null);
    setSelectedToAddress(null);
    setInputAmount(null);
    setShowReceipt(false);
    // Hide validation messages
    setDisplay({display: 'none'});
  };

  return (
    <div className='card mt-3 mb-3'>
      <div className='card-header'>
        <Header title="Transfers" margin="ml-2" icon={faMoneyBillTransfer} size="xs"/>
        <hr className='hr'/>
        <h5>From Address</h5>
        <form onSubmit={handleSubmit}>
          <div className='row text-center justify-content-center'>
              <select className="form-select mb-3" onChange={handleOnChangeFromAddress} value={selectedFromAddress || ''}>
                      <option value="" disabled>Select From Address</option>
                      {generatedAddresses.map(item => (
                          <option key={item} value={item}>
                              {item}
                          </option>
                      ))}
              </select>
              {/* Conditional Rendering of Required Fields */}
              {selectedFromAddress===null && !showReceipt && (
                <div className="alert alert-danger mt-1" role="alert" id="validations" style={display}>
                  Source Account is required.
                </div>
              )}
          </div>
          <h5>To Address</h5>
          <div className='row text-center justify-content-center'>
              <select className="form-select mb-3" onChange={handleOnChangeToAddress} value={selectedToAddress || ''}>
                      <option value="" disabled>Select To Address</option>
                      {generatedAddresses.map(item => (
                          <option key={item} value={item}>
                              {item}
                          </option>
                      ))}
              </select>
              {/* Conditional Rendering of Required Fields */}
              {selectedToAddress===null && !showReceipt && (
                <div className="alert alert-danger mt-1" role="alert" id="validations" style={display}>
                  Destination Account is required.
                </div>
              )}
              {/* Ensure that the address transferring to is different from the source */}
              {selectedToAddress!==null && selectedFromAddress===selectedToAddress && (
                <div className="alert alert-danger mt-1" role="alert" id="validations" style={display}>
                  Destination Account cannot be the same with Source Account.
                </div>
              )}
          </div>
          <h5>Amount</h5>
          <div className='row text-center justify-content-center'>
            <input className='form-control' 
                  type='number' 
                  placeholder='Transfer Amount'
                  onChange={handleOnChangeAmount} 
                  value={inputAmount || ''}
            />
            {/* Conditional Rendering of Required Fields */}
            {inputAmount===null && !showReceipt && (
              <div className="alert alert-danger mt-1" role="alert" id="validations" style={display}>
                Input Amount is required.
              </div>
            )}
          </div>
          <div className='row text-center justify-content-center mt-3'>
            <button type='submit' className='btn btn-outline-primary' disabled={showReceipt}>Submit</button>
          </div>
          <div className='row text-center justify-content-center mt-3'>
            <button type='button' className='btn btn-outline-secondary' onClick={handleCancel}>Cancel</button>
          </div>
        </form>
      </div>

      <div className='card-body'>
          {/* Use oncditional rendering to show the receipt details */}
          {receipt && showReceipt && 
          <div className='row alert alert-info'>
            <Receipt receiptDetails={receipt}/>
          </div>
          }
      </div>
    </div>
  )
};

export default Transfer;